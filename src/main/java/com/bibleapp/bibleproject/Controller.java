package com.bibleapp.bibleproject;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;


@RestController
public class Controller {
	
	@Autowired
	UserRepository userRepository;
	
	@Autowired
	ReadJson readjson; // This means to get the bean called userRepository Which is auto-generated by Spring, we will use it to handle the data
	

	@PostMapping(path="/add") // Map ONLY POST Requests
	public @ResponseBody String addNewUser (@RequestParam String name
			, @RequestParam String email) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		User n = new User();
		n.setName(name);
		n.setEmail(email);
		userRepository.save(n);
		return "Saved";
	}

	@GetMapping(path="/all")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}
	
	private List<Reference> referenceList = new ArrayList<>();
	
	@GetMapping("/hello")
	public String helloWorld() {
//		String[] arr = {"genesis", "1", "1"};
		readjson.main(null);
		return "hello";
//		return "Hello World!";
	}
	
	@GetMapping(path="/get-verse/{book}/{chapter}/{verse}")
	public String getVerseWithBCV(
			@PathVariable String book, 
			@PathVariable String chapter, 
			@PathVariable String verse) {
		String[] arr = {book, chapter, verse};
		return readjson.returnVerses(arr);
		}
	
	@GetMapping(path="/get-verse")
	public String getVerseWithBCVReqParams(
			@RequestParam(name = "book", defaultValue="Genesis") String book,
			@RequestParam(name = "chapter", defaultValue="0") String chapter,
			@RequestParam(name = "verse", defaultValue="0") String verse) {
		String[] arr = {book, chapter, verse};
		System.out.println(arr[0]);
		return readjson.returnVerses(arr);
		}
	
	@PostMapping(path="/add-verse")
	public String getVerseWithBCV( Reference reference) {
		
		referenceList.add(reference);
		System.out.println(referenceList.toString());
		
		return "success";
		}
	
	@GetMapping(path="/get-verse-list")
//	public List<Reference> getVerseWithBCV() {
	public String getVerseWithBCV() {
		String response = "";
		
		Reference defRef = new Reference("John", "1", "1");
		referenceList.add(defRef);
		
		response += "[";
		for(int i=0 ; i<referenceList.size() ; i++) {
			Reference listItem = referenceList.get(i);
			String book = listItem.getBook();
			String chapter = listItem.getChapter();
			String verse = listItem.getVerse();
			String[] arr = {book, chapter, verse};
			
			response += "{\"" + listItem.toString() + "\":";
			response +=  readjson.returnVerses(arr) + "}";
//			System.out.println(response);
			
			if(referenceList.size() > 1 & i != referenceList.size()-1) {
				response += ",";
			}
		}
		response += "]";
		
		System.out.println(response);
		return response;
		}
	
	
	private List<Blog> blogList = new ArrayList<>();
	
	@PostMapping(path="/write")
	public ResponseEntity<String> createBlogPost(@RequestBody Blog blog) {
		String title = blog.getTitle();
		String description = blog.getDescription();
		
		blogList.add(blog);
		
		String response = String.format("Blog created with title: %s, description: %s", title, description);
		return new ResponseEntity<>(response, HttpStatus.CREATED);
		
	}
	
	@GetMapping(path="/get-posts")
	public List<Blog> returnPosts(){
		return blogList;
	}

}
